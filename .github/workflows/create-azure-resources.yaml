name: Create Azure Resources

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/create-azure-resources.yaml
      - resources**

env:
  APIM_APIS_NAME: apis-functions
  APIM_NAME: qatranslator-je-apim
  FUNCTIONS_NAME: qatranslator-je-func
  LOCATION: japaneast
  RESOURCE_GROUP: qatranslator-je

jobs:
  create-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Create Resource Group if Needed
        run: |
          az group create \
            -n ${{ env.RESOURCE_GROUP }} \
            -l ${{ env.LOCATION }}

      - name: Create Resources
        id: exec-template
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/base.json
          parameters: azureApimPublisherEmail=${{ secrets.AZURE_APIM_PUBLISHER_EMAIL }} azureADGlobalAdminObjectId=${{ secrets.AZURE_AD_GLOBAL_ADMIN_OBJECT_ID }}

  use-deploy-apim-workflow:
    needs: create-resources
    uses: ./.github/workflows/reusable-deploy-apim.yaml
    secrets:
      AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID: ${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}
      AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET: ${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  set-functions-appsettings:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Add Key Vault Secrets
        run: |
          az functionapp config appsettings set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.FUNCTIONS_NAME }} \
            --settings @resources/functions-appsettings-vault-secret.json

  # FunctionsにAzureWebJobsStorageのアプリケーション設定をせずにデプロイすると
  # InternalServerErrorとなってしまうデプロイ処理は、以下のJobに定義すること
  connect-apim-2-functions:
    runs-on: ubuntu-latest
    needs: set-functions-appsettings
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Create Resources
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/connect-apim-2-functions.json

      - name: Update API Management Policy XML File
        run: |
          sed -i.bak \
            -e 's/{AZURE_AD_SP_MSAL_CLIENT_ID}/${{ secrets.AZURE_AD_SP_MSAL_CLIENT_ID }}/g' \
            -e 's/{AZURE_TENANT_ID}/${{ secrets.AZURE_TENANT_ID }}/g' \
            resources/apim-all-operations-policy.xml

      # 従量課金のAPI Managementは、ARMテンプレートにポリシーを記述してデプロイできないため、
      # PowershellにてFunctions API全体に対するポリシーを別途設定
      # ただし、healthcheckのAPIのポリシーのみ、CORSチェック・JWTトークンチェックを迂回する独自ポリシーを設定
      - name: Set API Management Policies
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            Set-AzApiManagementPolicy `
              -Context $apimContext `
              -ApiId "${{ env.APIM_APIS_NAME }}" `
              -PolicyFilePath "./resources/apim-all-operations-policy.xml"
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            Set-AzApiManagementPolicy `
              -Context $apimContext `
              -ApiId "${{ env.APIM_APIS_NAME }}" `
              -OperationId "get-healthcheck" `
              -PolicyFilePath "./resources/apim-get-healthcheck-policy.xml"
          azPSVersion: latest

  use-build-functions-app-workflow:
    needs: set-functions-appsettings
    uses: ./.github/workflows/reusable-build-functions-app.yaml

  use-deploy-functions-app-workflow:
    needs: use-build-functions-app-workflow
    uses: ./.github/workflows/reusable-deploy-functions-app.yaml
    secrets:
      AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID: ${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}
      AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET: ${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
