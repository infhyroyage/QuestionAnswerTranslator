name: Create Azure Resources

on:
  push:
    branches:
      - main
    # paths:
    #   - .github/workflows/deploy-resources.yaml
    #   - apim**
    #   - cosmosdb**
    #   - functions**
    #   - resources-after-functions-appsettings.json
    #   - resources.json

env:
  # APIM_NAME: qatranslator-je-server-apim
  # APP_NAME: qatranslator-je-client-app
  # FUNCTIONS_NAME: qatranslator-je-server-func
  LOCATION: japaneast
  # NODE_VERSION: "16.x"
  RESOURCE_GROUP: qatranslator-je

jobs:
  create-resources:
    runs-on: ubuntu-latest
    # outputs:
    #   functionsPrincipalId: ${{ steps.exec-template.outputs.functionsPrincipalId }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Create Resource Group if Needed
        run: |
          az group create \
            -n ${{ env.RESOURCE_GROUP }} \
            -l ${{ env.LOCATION }}

      # - name: Create Resources
      #   id: exec-template
      #   uses: azure/arm-deploy@v1
      #   with:
      #     scope: resourcegroup
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: ${{ env.RESOURCE_GROUP }}
      #     template: ./resources.json
      #     parameters: azureADGlobalAdminEmail=${{ secrets.AZURE_AD_GLOBAL_ADMIN_EMAIL }} azureADGlobalAdminObjectId=${{ secrets.AZURE_AD_GLOBAL_ADMIN_OBJECT_ID }} azureADSPMSALClientId=${{ secrets.AZURE_AD_SP_MSAL_CLIENT_ID }}

  # import-cosmosdb-items:
  #   runs-on: ubuntu-latest
  #   needs: create-resources
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Login Azure as Contributor
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CONTRIBUTOR_CREDENTIALS }}

  #     - name: Setup Node ${{ env.NODE_VERSION }} Environment
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Import Initial CosmosDB Items
  #       run: |
  #         pushd cosmosdb
  #         npm install
  #         npm run start
  #         popd

  # assign-role-2-func:
  #   runs-on: ubuntu-latest
  #   needs: create-resources
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Login Azure as User Access Administrator
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_USER_ACCESS_ADMINISTRATOR_CREDENTIALS }}

  #     - name: Assign Storage Blob Data Reader to Functions
  #       run: |
  #         az role assignment create \
  #           --role "Storage Blob Data Reader" \
  #           --assignee ${{ needs.create-resources.outputs.functionsPrincipalId }} \
  #           --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Storage/storageAccounts/qatranslatorjesa/blobServices/default/containers/deployments"

  #     - name: Assign Website Contributor to Functions
  #       run: |
  #         az role assignment create \
  #           --role "Website Contributor" \
  #           --assignee ${{ needs.create-resources.outputs.functionsPrincipalId }} \
  #           --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.FUNCTIONS_NAME }}/config/web"

  # set-appservice-appsettings:
  #   runs-on: ubuntu-latest
  #   needs: create-resources
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Login Azure as Contributor
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CONTRIBUTOR_CREDENTIALS }}

  #     - name: Add Key Vault Secrets
  #       run: |
  #         az webapp config appsettings set \
  #           -g ${{ env.RESOURCE_GROUP }} \
  #           -n ${{ env.APP_NAME }} \
  #           --settings @appservice/appsettings-key-vault-secret.json

  # set-functions-appsettings:
  #   runs-on: ubuntu-latest
  #   needs: create-resources
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Login Azure as Contributor
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CONTRIBUTOR_CREDENTIALS }}

  #     - name: Add Key Vault Secrets
  #       run: |
  #         az functionapp config appsettings set \
  #           -g ${{ env.RESOURCE_GROUP }} \
  #           -n ${{ env.FUNCTIONS_NAME }} \
  #           --settings @functions/appsettings-key-vault-secret.json

  # FunctionsにAzureWebJobsStorageのアプリケーション設定をせずにデプロイすると
  # InternalServerErrorとなってしまうデプロイ処理は、以下のJobに定義すること
  # create-resources-after-functions-appsettings:
  #   runs-on: ubuntu-latest
  #   needs: set-functions-appsettings
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Login Azure as Contributor
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CONTRIBUTOR_CREDENTIALS }}
  #         enable-AzPSSession: true

  #     - name: Create Resources
  #       uses: azure/arm-deploy@v1
  #       with:
  #         scope: resourcegroup
  #         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         resourceGroupName: ${{ env.RESOURCE_GROUP }}
  #         template: ./resources-after-functions-appsettings.json

  #     # 従量課金のAPI Managementは、ARMテンプレートにポリシーを記述してデプロイできないため、
  #     # PowershellにてFunctions API全体に対するポリシーを別途設定
  #     - name: Set API Management Policies
  #       uses: azure/powershell@v1
  #       with:
  #         inlineScript: |
  #           $apimContext = New-AzApiManagementContext `
  #             -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
  #             -ServiceName "${{ env.APIM_NAME }}"
  #           Set-AzApiManagementPolicy `
  #             -Context $apimContext `
  #             -ApiId "apis-functions" `
  #             -PolicyFilePath "./apim/all-operations-policy.xml"
  #         azPSVersion: latest
