name: Create Azure Resources

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/create-azure-resources.yaml
      - cosmosdb**
      - resources**

env:
  APIM_APIS_NAME: apis-functions
  APIM_NAME: qatranslator-je-apim
  APIM_SUBSCRIPTION_NAME: subscriptions-functions
  APP_SERVICE_NAME: qatranslator-je-appservice
  COGNITIVE_NAME: qatranslator-je-cognitive
  FUNCTIONS_NAME: qatranslator-je-func
  GHCR_IMAGE_NAME: react
  GHCR_REPOSITORY_NAME: qatranslator
  LOCATION: japaneast
  NODE_VERSION: "16.17.0"
  RESOURCE_GROUP: qatranslator-je

jobs:
  create-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Get Azure AD Object ID Owned Contributor
        id: get_azure_ad_owner_object_id
        run: |
          azureADOwnerObjectId=$( \
            az ad app owner list \
              --id ${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID  }} \
              --query "[0].id" \
              -o tsv \
          )
          echo "azure_ad_owner_object_id=${azureADOwnerObjectId}" >> $GITHUB_OUTPUT

      - name: Create Resource Group if Needed
        run: |
          az group create \
            -n ${{ env.RESOURCE_GROUP }} \
            -l ${{ env.LOCATION }}

      - name: Create Resources
        id: exec-template
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/base.json
          parameters: azureADSPContributorObjectId=${{ secrets.AZURE_AD_SP_CONTRIBUTOR_OBJECT_ID }} azureADGlobalAdminEmail=${{ secrets.AZURE_AD_GLOBAL_ADMIN_EMAIL }} azureADOwnerObjectId=${{ steps.get_azure_ad_owner_object_id.outputs.azure_ad_owner_object_id }} githubToken=${{ secrets.GHCR_PAT_READ_PACKAGES }} githubUsername=${{ github.actor }}

  deploy-apim:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Import Swagger into API Management
        run: |
          az apim api import \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.APIM_NAME }} \
            --path "api" \
            --specification-format OpenApi \
            --api-id ${{ env.APIM_APIS_NAME }} \
            --specification-path ./apim/swagger.yaml

  import-cosmosdb-items:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Import Initial CosmosDB Items
        run: |
          npm install
          npx ts-node cosmosdb/src/initialImport.ts

  build-ghcr:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Get API Management Subscription Key
        id: get_api_management_subscription_key
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            $apimFunctionsSubscriptionKey = Get-AzApiManagementSubscriptionKey `
              -Context $apimContext `
              -SubscriptionId "${{ env.APIM_SUBSCRIPTION_NAME }}"
            $apimSubscriptionKey = $apimFunctionsSubscriptionKey.PrimaryKey
            Write-Output "::add-mask::${apimSubscriptionKey}"
            Write-Output "apim_subscription_key=${apimSubscriptionKey}" >> $env:GITHUB_OUTPUT
          azPSVersion: latest

      - name: Get Cognitive Service Account Key
        id: get_cognitive_key
        run: |
          cognitiveKey=$( \
            az cognitiveservices account keys list \
              -g ${{ env.RESOURCE_GROUP }} \
              -n ${{ env.COGNITIVE_NAME }} \
              --query "key1" \
              -o tsv \
          )
          echo "cognitive_key=${cognitiveKey}" >> $GITHUB_OUTPUT

      - name: Replace Secure Environment Variables
        run: |
          sed -i \
            -e 's/VALUE_OF_REACT_APP_API_MANAGEMENT_SUBSCRIPTION_KEY/${{ steps.get_api_management_subscription_key.outputs.apim_subscription_key }}/g' \
            -e 's/VALUE_OF_REACT_APP_AZURE_AD_SP_MSAL_CLIENT_ID/${{ secrets.AZURE_AD_SP_MSAL_CLIENT_ID }}/g' \
            -e 's/VALUE_OF_REACT_APP_AZURE_COGNITIVE_KEY/${{ steps.get_cognitive_key.outputs.cognitive_key }}/g' \
            -e 's/VALUE_OF_REACT_APP_AZURE_TENANT_ID/${{ secrets.AZURE_TENANT_ID }}/g' \
            -e 's/VALUE_OF_REACT_APP_DEEPL_AUTH_KEY/${{ secrets.DEEPL_AUTH_KEY }}/g' \
            react/.env.production

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build and Docker Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: react/Dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ env.GHCR_REPOSITORY_NAME }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.sha	}}

  set-appservice-appsettings:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Add Key Vault Secrets
        run: |
          az webapp config appsettings set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.APP_SERVICE_NAME }} \
            --settings @resources/appservice-appsettings-vault-secret.json

  set-functions-appsettings:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Add Key Vault Secrets
        run: |
          az functionapp config appsettings set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.FUNCTIONS_NAME }} \
            --settings @resources/functions-appsettings-vault-secret.json

  deploy-appservice:
    runs-on: ubuntu-latest
    needs: build-ghcr
    steps:
      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Deploy App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_SERVICE_NAME }}
          images: ghcr.io/${{ github.actor }}/${{ env.GHCR_REPOSITORY_NAME }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.sha	}}

  # FunctionsにAzureWebJobsStorageのアプリケーション設定をせずにデプロイすると
  # InternalServerErrorとなってしまうデプロイ処理は、以下のJobに定義すること
  connect-apim-2-functions:
    runs-on: ubuntu-latest
    needs: set-functions-appsettings
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Create Resources
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/connect-apim-2-functions.json

      # 従量課金のAPI Managementは、ARMテンプレートにポリシーを記述してデプロイできないため、
      # PowershellにてFunctions API全体に対するポリシーを別途設定
      # ただし、healthcheckのAPIのポリシーのみ、CORSチェック・JWTトークンチェックを迂回する独自ポリシーを設定
      - name: Set API Management Policies
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            Set-AzApiManagementPolicy `
              -Context $apimContext `
              -ApiId "${{ env.APIM_APIS_NAME }}" `
              -PolicyFilePath "./resources/apim-all-operations-policy.xml"
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            Set-AzApiManagementPolicy `
              -Context $apimContext `
              -ApiId "${{ env.APIM_APIS_NAME }}" `
              -OperationId "get-healthcheck" `
              -PolicyFilePath "./resources/apim-get-healthcheck-policy.xml"
          azPSVersion: latest

  build-artifacts:
    runs-on: ubuntu-latest
    needs: set-functions-appsettings
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Azure Functions Application
        run: |
          pushd functions
          cp ../package.json .
          npm install
          npm run functions:build
          popd

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qatranslator-func
          path: |
            functions/*/*.js
            functions/*/function.json
            functions/host.json
            functions/local.settings.json
            functions/package.json
            !functions/node_modules
            !functions/types

  deploy-functions-app:
    runs-on: ubuntu-latest
    needs: build-artifacts
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: qatranslator-func

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Azure Functions Application
        run: npm install --production

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Deploy Azure Functions Application
        uses: Azure/functions-action@v1.4.8
        with:
          app-name: ${{ env.FUNCTIONS_NAME }}
          package: .
