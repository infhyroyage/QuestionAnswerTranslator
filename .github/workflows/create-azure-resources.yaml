name: Create Azure Resources

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/create-azure-resources.yaml
      - cosmosdb**
      - resources**

env:
  APIM_NAME: qatranslator-je-apim
  APP_SERVICE_NAME: qatranslator-je-appservice
  FUNCTIONS_NAME: qatranslator-je-func
  LOCATION: japaneast
  NODE_VERSION: "16.17.0"
  RESOURCE_GROUP: qatranslator-je

jobs:
  create-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Create Resource Group if Needed
        run: |
          az group create \
            -n ${{ env.RESOURCE_GROUP }} \
            -l ${{ env.LOCATION }}

      - name: Create Resources
        id: exec-template
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/base.json
          parameters: azureADSPContributorObjectId=${{ secrets.AZURE_AD_SP_CONTRIBUTOR_OBJECT_ID }} azureADGlobalAdminEmail=${{ secrets.AZURE_AD_GLOBAL_ADMIN_EMAIL }} azureADGlobalAdminObjectId=${{ secrets.AZURE_AD_GLOBAL_ADMIN_OBJECT_ID }} azureADSPMSALClientId=${{ secrets.AZURE_AD_SP_MSAL_CLIENT_ID }} deeplAuthKey=${{ secrets.DEEPL_AUTH_KEY }} githubToken=${{ secrets.GHCR_PAT_READ_PACKAGES }} githubUsername=${{ github.actor }}

  import-cosmosdb-items:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Import Initial CosmosDB Items
        run: |
          npm install
          npx ts-node cosmosdb/src/initialImport.ts

  set-appservice-appsettings:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Add Key Vault Secrets
        run: |
          az webapp config appsettings set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.APP_SERVICE_NAME }} \
            --settings @resources/appservice-appsettings-vault-secret.json

  set-functions-appsettings:
    runs-on: ubuntu-latest
    needs: create-resources
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Add Key Vault Secrets
        run: |
          az functionapp config appsettings set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.FUNCTIONS_NAME }} \
            --settings @resources/functions-appsettings-vault-secret.json

  # FunctionsにAzureWebJobsStorageのアプリケーション設定をせずにデプロイすると
  # InternalServerErrorとなってしまうデプロイ処理は、以下のJobに定義すること
  create-resources-after-functions-appsettings:
    runs-on: ubuntu-latest
    needs: set-functions-appsettings
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Create Resources
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./resources/after-functions-appsettings.json

      # 従量課金のAPI Managementは、ARMテンプレートにポリシーを記述してデプロイできないため、
      # PowershellにてFunctions API全体に対するポリシーを別途設定
      - name: Set API Management Policies
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apimContext = New-AzApiManagementContext `
              -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
              -ServiceName "${{ env.APIM_NAME }}"
            Set-AzApiManagementPolicy `
              -Context $apimContext `
              -ApiId "apis-functions" `
              -PolicyFilePath "./resources/apim-all-operations-policy.xml"
          azPSVersion: latest
